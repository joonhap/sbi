<<holder>>=
grid <- seq(-5, 5, by=.5)
set.seed(909852)
llfun <- function(pt) {
    -(pt-.2)^2 + min(4, .2*pt^3) - .1*(pt+1)^4
}
ll <- llfun(grid) + 5*rnorm(length(grid))
s <- simll(rbind(ll), params=grid)

newpt <- 0
optDesign.simll(s, init=newpt, penalty=2)

for (m in 1:100) {
    opt <- optDesign.simll(s, init=runif(1,-10,10))
    newpt <- unname(opt[["par"]])
    grid <- c(grid, newpt)
    ll <- c(ll, llfun(newpt) + 5*rnorm(1))
    s <- simll(rbind(ll), params=grid)
}

plot(grid)

htout <- ht(s, null.value=0, test="MESLE", autoScaling=TRUE)
MESLEhat <- htout$meta_model_MLE_for_MESLE

estCoef <- c(htout$regression_estimates$a, htout$regression_estimates$b, htout$regression_estimates$c)

cubicCoef <- htout$cubic_coefficients

plot(grid,ll)
plotgrid <- seq(range(grid)[1], range(grid)[2], length.out=151)
lines(plotgrid, sapply(plotgrid, function(x) { sum(estCoef*c(1,x,x^2)) }))

plot(grid, log(htout$updated_weights))

theta <- cbind(attr(s, "params")) # coerce into a matrix
theta_mean <- apply(theta, 2, mean)
theta_sd <- apply(theta, 2, sd)
trans_n <- function(vec) { (vec-theta_mean)/theta_sd } # normalize by centering and scaling
trans_b <- function(vec) { vec*theta_sd + theta_mean } # transform back to the original scale
ca <- function(x) { sum(c(vec012(trans_n(x)), vec3(trans_n(x))) * Ahat_cubic) } # cubic approx
Third <- function(x) { sum(vec3(trans_n(x)-trans_n(MESLEhat)) * Ahat_cubic[(dim012+1):dim0123]) } # third order term of the cubic approximation in the form of (multidimensional equivalent of) cubic_coeff*(theta-MESLEhat)^3
tca <- function(x) { ca(x) - Third(x) } # truncated cubic approximation where the third order term is dropped
@

<<holder2>>=
grid <- as.matrix(expand.grid(-5:5, -5:5))
M <- dim(grid)[1]
set.seed(909852)
qform <- function(x, met) { c(x%*%met%*%x) } # quadratic form
llfun <- function(pt) {
    -qform(pt-c(1,-1),diag(2))
    ##-qform(pt-c(.2,.5),matrix(c(2,.3,.3,1.8),2,2)) + min(4, .2*pt[1]^3+.3*pt[2]^3) - .1*(pt[1]-1)^4-.2*(pt[2]-.7)^4-.1*(pt[1]-.2)^2*(pt[2]-.1)^2
}
ll <- apply(grid, 1, llfun) + 5*rnorm(M)
s <- simll(rbind(ll), params=grid)

library(ggplot2)
library(plotly)
df <- data.frame(x1=grid[,1], x2=grid[,2], ll=ll)
plot_ly(
    df, x= ~x1, y= ~x2, z= ~ll,
    type='mesh3d', intensity = ~ll,
    colors= colorRamp(rainbow(5))
)

xgrid <- seq(-5, 5, by=.1)
plot(xgrid, sapply(xgrid, function(x) llfun(c(x,3))))

newpt <- c(0,0)
optDesign.simll(s, init=newpt)

for (m in 1:100) {
    opt <- optDesign.simll(s, init=rnorm(2,0,.3))
    newpt <- unname(opt[["par"]])
    grid <- rbind(grid, newpt)
    ll <- c(ll, llfun(newpt) + 5*rnorm(1))
    s <- simll(rbind(ll), params=grid)
}

len <- dim(grid)[1]
plot(grid, col=c(rep(1,121),rep(0,len-121)))
text(grid[122:len,]); lines(grid[122:len,])

htout <- ht(s, null.value=c(0,0), test="MESLE", autoScaling=TRUE)
MESLEhat <- htout$meta_model_MLE_for_MESLE

estCoef <- c(htout$regression_estimates$a, htout$regression_estimates$b, htout$regression_estimates$c)

cubicCoef <- htout$cubic_coefficients

plot_ly(data.frame(x1=grid[,1], x2=grid[,2], ll=ll, logwadj=log(unname(htout$updated_weights))),
    x=~x1, y=~x2, z=~logwadj,
    type='mesh3d', intensity=~logwadj,
    colors= colorRamp(rainbow(5))
)
@