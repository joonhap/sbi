// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// qmllr1
Rcpp::List qmllr1(Rcpp::NumericVector p, const double M, const double k, double num_error_size, const bool lower, const bool log_p, const bool force);
RcppExport SEXP _siblle_qmllr1(SEXP pSEXP, SEXP MSEXP, SEXP kSEXP, SEXP num_error_sizeSEXP, SEXP lowerSEXP, SEXP log_pSEXP, SEXP forceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type M(MSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type num_error_size(num_error_sizeSEXP);
    Rcpp::traits::input_parameter< const bool >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const bool >::type force(forceSEXP);
    rcpp_result_gen = Rcpp::wrap(qmllr1(p, M, k, num_error_size, lower, log_p, force));
    return rcpp_result_gen;
END_RCPP
}
// pmllr1
Rcpp::List pmllr1(Rcpp::NumericVector q, const double M, const double k, double num_error_size, const bool lower, const bool log_p, const bool force);
RcppExport SEXP _siblle_pmllr1(SEXP qSEXP, SEXP MSEXP, SEXP kSEXP, SEXP num_error_sizeSEXP, SEXP lowerSEXP, SEXP log_pSEXP, SEXP forceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type M(MSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type num_error_size(num_error_sizeSEXP);
    Rcpp::traits::input_parameter< const bool >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const bool >::type force(forceSEXP);
    rcpp_result_gen = Rcpp::wrap(pmllr1(q, M, k, num_error_size, lower, log_p, force));
    return rcpp_result_gen;
END_RCPP
}
// rmllr1
Rcpp::NumericVector rmllr1(const int n, const double M, const double k);
RcppExport SEXP _siblle_rmllr1(SEXP nSEXP, SEXP MSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type M(MSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(rmllr1(n, M, k));
    return rcpp_result_gen;
END_RCPP
}
// qmllr2
Rcpp::List qmllr2(Rcpp::NumericVector p, const double M, const double k, const double nu, const double s0, double num_error_size, const bool lower, const bool log_p, const bool force);
RcppExport SEXP _siblle_qmllr2(SEXP pSEXP, SEXP MSEXP, SEXP kSEXP, SEXP nuSEXP, SEXP s0SEXP, SEXP num_error_sizeSEXP, SEXP lowerSEXP, SEXP log_pSEXP, SEXP forceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type M(MSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double >::type s0(s0SEXP);
    Rcpp::traits::input_parameter< double >::type num_error_size(num_error_sizeSEXP);
    Rcpp::traits::input_parameter< const bool >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const bool >::type force(forceSEXP);
    rcpp_result_gen = Rcpp::wrap(qmllr2(p, M, k, nu, s0, num_error_size, lower, log_p, force));
    return rcpp_result_gen;
END_RCPP
}
// pmllr2
Rcpp::List pmllr2(Rcpp::NumericVector q, const double M, const double k, const double nu, const double s0, double num_error_size, const bool lower, const bool log_p, const bool force);
RcppExport SEXP _siblle_pmllr2(SEXP qSEXP, SEXP MSEXP, SEXP kSEXP, SEXP nuSEXP, SEXP s0SEXP, SEXP num_error_sizeSEXP, SEXP lowerSEXP, SEXP log_pSEXP, SEXP forceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type M(MSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double >::type s0(s0SEXP);
    Rcpp::traits::input_parameter< double >::type num_error_size(num_error_sizeSEXP);
    Rcpp::traits::input_parameter< const bool >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const bool >::type force(forceSEXP);
    rcpp_result_gen = Rcpp::wrap(pmllr2(q, M, k, nu, s0, num_error_size, lower, log_p, force));
    return rcpp_result_gen;
END_RCPP
}
// rmllr2
Rcpp::NumericVector rmllr2(const int n, const double M, const double k, const double nu, const double s0);
RcppExport SEXP _siblle_rmllr2(SEXP nSEXP, SEXP MSEXP, SEXP kSEXP, SEXP nuSEXP, SEXP s0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type M(MSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double >::type s0(s0SEXP);
    rcpp_result_gen = Rcpp::wrap(rmllr2(n, M, k, nu, s0));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_siblle_qmllr1", (DL_FUNC) &_siblle_qmllr1, 7},
    {"_siblle_pmllr1", (DL_FUNC) &_siblle_pmllr1, 7},
    {"_siblle_rmllr1", (DL_FUNC) &_siblle_rmllr1, 3},
    {"_siblle_qmllr2", (DL_FUNC) &_siblle_qmllr2, 9},
    {"_siblle_pmllr2", (DL_FUNC) &_siblle_pmllr2, 9},
    {"_siblle_rmllr2", (DL_FUNC) &_siblle_rmllr2, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_siblle(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
